create table if not exists caja
(
    id_caja    integer generated by default as identity
        primary key,
    created_at timestamp(6),
    updated_at timestamp(6),
    nombre     varchar(100) not null,
    prefijo    varchar(20)  not null
);

create table if not exists caja_secuencia
(
    fecha     date    not null,
    id_caja   integer not null,
    secuencia integer not null,
    primary key (fecha, id_caja)
);

create table if not exists cliente
(
    id_cliente                            integer generated by default as identity
        primary key,
    created_at                            timestamp(6),
    updated_at                            timestamp(6),
    apellido                              varchar(100) not null,
    direccion                             varchar(255),
    email                                 varchar(150)
        constraint ukcmxo70m08n43599l3h0h07cc6
            unique,
    fecha_nacimiento                      timestamp(6),
    nombre                                varchar(100) not null,
    telefono                              varchar(50),
    intento_acceso_fallido_id_dispositivo integer
        constraint ukp4y9lc3t54kbrnl02tw2hmy0k
            unique,
    suscripcion_id_suscripcion            integer
        constraint uk6oqqc14pakehnnq1ys9qvqtbo
            unique
);

create table if not exists acceso
(
    id_acceso            integer generated by default as identity
        primary key,
    created_at           timestamp(6),
    updated_at           timestamp(6),
    exitoso              boolean not null,
    fecha_acceso         timestamp(6),
    fecha_salida         timestamp(6),
    metodo_acceso        varchar(50)
        constraint acceso_metodo_acceso_check
            check ((metodo_acceso)::text = ANY
                   ((ARRAY ['BIOMETRIA'::character varying, 'TARJETA'::character varying, 'HUELLA'::character varying, 'RECONOCIMIENTO_FACIAL'::character varying])::text[])),
    metodo_autenticacion varchar(50)
        constraint acceso_metodo_autenticacion_check
            check ((metodo_autenticacion)::text = ANY
                   ((ARRAY ['BIOMETRIA'::character varying, 'TARJETA'::character varying, 'HUELLA'::character varying, 'RECONOCIMIENTO_FACIAL'::character varying])::text[])),
    id_cliente           integer not null
        constraint fk3ghmv9nqcn3apxf27ijx7j5ue
            references cliente
);

create index idx_cliente_email
    on cliente (email);

create table if not exists dispositivo_biometrico
(
    id_dispositivo                        integer generated by default as identity
        primary key,
    created_at                            timestamp(6),
    updated_at                            timestamp(6),
    estado                                varchar(50)
        constraint dispositivo_biometrico_estado_check
            check ((estado)::text = ANY
                   ((ARRAY ['ACTIVO'::character varying, 'INACTIVO'::character varying, 'MANTENIMIENTO'::character varying])::text[])),
    nombre                                varchar(100) not null,
    tipo                                  varchar(50)
        constraint dispositivo_biometrico_tipo_check
            check ((tipo)::text = ANY
                   ((ARRAY ['BIOMETRIA'::character varying, 'TARJETA'::character varying, 'HUELLA'::character varying, 'RECONOCIMIENTO_FACIAL'::character varying])::text[])),
    ubicacion                             varchar(200),
    id_acceso                             integer      not null
        constraint fkrvsidoeyu5g958n02t0w81r4k
            references acceso,
    intento_acceso_fallido_id_dispositivo integer
);


create table if not exists intento_acceso_fallido
(
    id_dispositivo                           integer generated by default as identity
        primary key,
    created_at                               timestamp(6),
    updated_at                               timestamp(6),
    fecha                                    timestamp(6) not null,
    metodo_autenticacion                     varchar(50),
    motivo                                   varchar(255),
    id_cliente_id_cliente                    integer
        constraint uklfb2dckruh62i9y5vbmpl1xfs
            unique
        constraint fk1my85rt6afkjge4wscof4ukw8
            references cliente,
    id_dispositivo_biometrico_id_dispositivo integer
        constraint ukhvdl1iy5foj9e3wdmqof9p8eh
            unique
        constraint fkedb3id9shoetpx0dt9iurd4wa
            references dispositivo_biometrico
);

alter table cliente
    add constraint fk4jjon4s2dvy1dyef6cnojuxpr
        foreign key (intento_acceso_fallido_id_dispositivo) references intento_acceso_fallido;

alter table dispositivo_biometrico
    add constraint fkvi7qn8kt3m9divdqt5u9coci
        foreign key (intento_acceso_fallido_id_dispositivo) references intento_acceso_fallido;

create table if not exists plan_suscripcion
(
    id_plan     integer generated by default as identity
        primary key,
    costo_base  numeric(10, 2),
    descripcion varchar(255),
    nombre      varchar(255) not null
        constraint plan_suscripcion_nombre_check
            check ((nombre)::text = ANY
                   ((ARRAY ['MENSUAL'::character varying, 'SEMESTRAL'::character varying, 'ANUAL'::character varying])::text[]))
);

create table if not exists producto
(
    id_producto   integer generated by default as identity primary key,
    created_at    timestamp(6),
    updated_at    timestamp(6),
    codigo_barras varchar(255) not null
        constraint uknrobij4fg0dpdfcro7t2ystd1
            unique,
    descripcion   varchar(255),
    nombre        varchar(100) not null,
    precio        numeric(10, 2),
    stock         integer,
    imagen        varchar(100),
    sku           varchar(50)
);


create table if not exists promocion
(
    id_promocion    integer generated by default as identity
        primary key,
    created_at      timestamp(6),
    updated_at      timestamp(6),
    descripcion     varchar(255),
    descuento       numeric(10, 2),
    tipo_plan       varchar(100)
        constraint promocion_tipo_plan_check
            check ((tipo_plan)::text = ANY
                   ((ARRAY ['MENSUAL'::character varying, 'SEMESTRAL'::character varying, 'ANUAL'::character varying])::text[])),
    vigencia_fin    timestamp(6),
    vigencia_inicio timestamp(6)
);


create table if not exists suscripcion
(
    id_suscripcion integer generated by default as identity
        primary key,
    created_at     timestamp(6),
    updated_at     timestamp(6),
    estado         varchar(50),
    fecha_fin      timestamp(6),
    fecha_inicio   timestamp(6),
    id_cliente     integer not null
        constraint fksjdfiur60h1huq5lw9qgklxdf
            references cliente,
    id_plan        integer
        constraint uklulaqoqgyxchw4jlquioj2tq1
            unique
        constraint fkkjdh5m5lkrevg80a8jqvnmyx9
            references plan_suscripcion,
    id_promocion   integer
        constraint fknuqeq580rka3sdmjvn2u7bf71
            references promocion,
    constraint suscripcion_check
        check (fecha_fin > fecha_inicio)
);


alter table cliente
    add constraint fk8259ikr7gq3pq8d1f3cp942cx
        foreign key (suscripcion_id_suscripcion) references suscripcion;

create table if not exists usuario
(
    id_usuario    integer generated by default as identity
        primary key,
    created_at    timestamp(6),
    updated_at    timestamp(6),
    email         varchar(150) not null
        constraint uk5171l57faosmj8myawaucatdw
            unique,
    estado        varchar(50)  not null
        constraint usuario_estado_check
            check ((estado)::text = ANY
                   ((ARRAY ['ACTIVO'::character varying, 'INACTIVO'::character varying, 'MANTENIMIENTO'::character varying])::text[])),
    password_hash varchar(255) not null,
    role          varchar(50)  not null
        constraint usuario_role_check
            check ((role)::text = ANY
                   ((ARRAY ['CLIENTE'::character varying, 'ADMIN'::character varying, 'ENTRENADOR'::character varying, 'RECEPCIONISTA'::character varying])::text[])),
    username      varchar(100) not null
        constraint uk863n1y3x0jalatoir4325ehal
            unique
);


create table if not exists log_acceso
(
    id_log     integer generated by default as identity
        primary key,
    created_at timestamp(6),
    updated_at timestamp(6),
    ip_address varchar(45),
    login_time timestamp(6),
    success    boolean,
    id_usuario integer
        constraint fk2ibudi7pkeuvmib23ierii37y
            references usuario
);

create table if not exists turno
(
    id_turno    integer generated by default as identity
        primary key,
    created_at  timestamp(6),
    updated_at  timestamp(6),
    hora_fin    time    not null,
    hora_inicio time    not null,
    nombre      varchar(50),
    id_usuario  integer not null
        constraint fkqpkflarb3uekukgd8tntv3b7x
            references usuario
);

create table if not exists usuario_detalle
(
    id_detalle       integer generated by default as identity
        primary key,
    created_at       timestamp(6),
    updated_at       timestamp(6),
    direccion        varchar(255),
    fecha_nacimiento timestamp(6),
    genero           varchar(50)
        constraint usuario_detalle_genero_check
            check ((genero)::text = ANY
                   ((ARRAY ['MASCULINO'::character varying, 'FEMENINO'::character varying, 'OTRO'::character varying])::text[])),
    nombre_completo  varchar(200),
    telefono         varchar(50),
    id_usuario       integer not null
        constraint fkmmwi774yw8kkyixw45b7t7psc
            references usuario
);

create table if not exists usuario_token
(
    id_token   integer generated by default as identity
        primary key,
    created_at timestamp(6),
    updated_at timestamp(6),
    expires_at timestamp(6) not null,
    revoked    boolean,
    token      varchar(500) not null,
    token_type varchar(50)  not null
        constraint usuario_token_token_type_check
            check ((token_type)::text = ANY
                   ((ARRAY ['ACCESS'::character varying, 'REFRESH'::character varying])::text[])),
    id_usuario integer      not null
        constraint fko66wqkn6lx82f7yq5y9tkdnl5
            references usuario
);


create table if not exists venta
(
    id_venta        integer generated by default as identity
        primary key,
    created_at      timestamp(6),
    updated_at      timestamp(6),
    fecha_venta     timestamp(6),
    metodo_pago     varchar(50)
        constraint venta_metodo_pago_check
            check ((metodo_pago)::text = ANY
                   ((ARRAY ['EFECTIVO'::character varying, 'TARJETA'::character varying, 'ELECTRONICO'::character varying, 'TRANSFERENCIA'::character varying])::text[])),
    num_transaccion varchar(100),
    tipo_venta      varchar(50) default 'producto'::character varying not null
        constraint venta_tipo_venta_check
            check ((tipo_venta)::text = ANY
                   ((ARRAY ['PRODUCTO'::character varying, 'SUSCRIPCION'::character varying, 'MIXTO'::character varying])::text[])),
    total           numeric(10, 2),
    id_caja         integer
        constraint fkq3ld8tcfknkmn0enb4beay3uh
            references caja,
    id_cliente      integer
        constraint fksor2qmi3thao7a8or49vlohp9
            references cliente,
    id_suscripcion  integer
        constraint fk2ulxhqjjf4cx0vnxfwc3lm6gm
            references suscripcion,
    id_turno        integer                                           not null
        constraint fktr692svhk61ton5um14sbyi1f
            references turno,
    id_usuario      integer                                           not null
        constraint fkoilu1fdfgmu7sfe0spen005ms
            references usuario
);

create table if not exists detalle_venta
(
    id_detalle      integer generated by default as identity
        primary key,
    created_at      timestamp(6),
    updated_at      timestamp(6),
    cantidad        integer,
    precio_unitario numeric(10, 2),
    subtotal        numeric(10, 2),
    id_producto     integer not null
        constraint fksntaik0t9jxcky777753wytsx
            references producto,
    id_promocion    integer
        constraint fka2lieterkptrw8rlvw9l9kp7v
            references promocion,
    id_venta        integer not null
        constraint fkoknpg31rxsqnjxrsu7iy47p1o
            references venta
);

create index idx_venta_fecha
    on venta (fecha_venta);

create function generar_num_transaccion_venta() returns trigger
    language plpgsql
as
$$
DECLARE
    caja_prefijo varchar;
    fecha_actual date := current_date;
    secuencia_actual integer;
    nuevo_secuencia integer;
BEGIN
    -- Ejecutar solo si el método de pago es 'efectivo'
    IF lower(NEW.metodo_pago) <> 'efectivo' THEN
        RETURN NEW;
    END IF;

    -- Obtener el prefijo de la caja desde la tabla caja
    SELECT prefijo INTO caja_prefijo
    FROM caja
    WHERE id_caja = NEW.id_caja;

    IF caja_prefijo IS NULL THEN
        RAISE EXCEPTION 'La caja con id % no existe o no tiene prefijo asignado.', NEW.id_caja;
    END IF;

    -- Buscar la secuencia actual para esta caja y fecha en la tabla caja_secuencia
    SELECT secuencia INTO secuencia_actual
    FROM caja_secuencia
    WHERE id_caja = NEW.id_caja AND fecha = fecha_actual
        FOR UPDATE;

    IF secuencia_actual IS NULL THEN
        nuevo_secuencia := 1;
        INSERT INTO caja_secuencia (id_caja, fecha, secuencia)
        VALUES (NEW.id_caja, fecha_actual, nuevo_secuencia);
    ELSE
        nuevo_secuencia := secuencia_actual + 1;
        UPDATE caja_secuencia
        SET secuencia = nuevo_secuencia
        WHERE id_caja = NEW.id_caja AND fecha = fecha_actual;
    END IF;

    -- Generar el número de transacción con el formato: [PREFIJO]-[FECHA AAAAMMDD]-[ID_CAJA]-[SECUENCIA]
    NEW.num_transaccion := caja_prefijo || '-' ||
                           to_char(fecha_actual, 'YYYYMMDD') || '-' ||
                           lpad(NEW.id_caja::text, 2, '0') || '-' ||
                           lpad(nuevo_secuencia::text, 4, '0');
    RETURN NEW;
END;
$$;

alter function generar_num_transaccion_venta() owner to postgres;

create trigger trg_generar_num_transaccion_venta
    before insert
    on venta
    for each row
execute procedure generar_num_transaccion_venta();

